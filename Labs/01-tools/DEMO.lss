
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d6  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bb  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dot>:
/* Function definitions ----------------------------------------------*/
void dot()
{
    // Invert LED in Data Register
    // PORTB = PORTB xor 0010 0000
    PORTB = PORTB ^ (1<<LED_GREEN);
  80:	95 b1       	in	r25, 0x05	; 5
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	98 27       	eor	r25, r24
  86:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	33 ec       	ldi	r19, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <dot+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <dot+0x18>
  98:	00 00       	nop
    _delay_ms(DOT_DELAY);
    PORTB = PORTB ^ (1<<LED_GREEN);
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	89 27       	eor	r24, r25
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	33 ec       	ldi	r19, 0xC3	; 195
  a4:	89 e0       	ldi	r24, 0x09	; 9
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <dot+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <dot+0x30>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <dash>:
    _delay_ms(INTER_DELAY);
}

void dash()
{
    PORTB = PORTB ^ (1<<LED_GREEN);
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	98 27       	eor	r25, r24
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	3b e4       	ldi	r19, 0x4B	; 75
  c0:	9d e1       	ldi	r25, 0x1D	; 29
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <dash+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <dash+0x18>
  cc:	00 00       	nop
    _delay_ms(DASH_DELAY);
    PORTB = PORTB ^ (1<<LED_GREEN);
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	33 ec       	ldi	r19, 0xC3	; 195
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <dash+0x26>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <dash+0x30>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <main>:
 **********************************************************************/
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  e8:	25 9a       	sbi	0x04, 5	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  ea:	2d 98       	cbi	0x05, 5	; 5

    // Infinite loop
    while (1)
    {
        // DE2 -> -.. . ..---
        dash();
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <dash>
        dot();
  f0:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <dot>
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	87 e8       	ldi	r24, 0x87	; 135
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x16>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x20>
 108:	00 00       	nop
        _delay_ms(CHAR_DELAY);
        dot();
 10a:	0e 94 40 00 	call	0x80	; 0x80 <dot>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x2c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x36>
 11e:	00 00       	nop
        _delay_ms(CHAR_DELAY);
        dot();
 120:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
 124:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dash();
 128:	0e 94 5a 00 	call	0xb4	; 0xb4 <dash>
        dash();
 12c:	0e 94 5a 00 	call	0xb4	; 0xb4 <dash>
        dash();
 130:	0e 94 5a 00 	call	0xb4	; 0xb4 <dash>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	87 e9       	ldi	r24, 0x97	; 151
 138:	9a e3       	ldi	r25, 0x3A	; 58
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x52>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x5c>
 144:	00 00       	nop
 146:	d2 cf       	rjmp	.-92     	; 0xec <main+0x4>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
